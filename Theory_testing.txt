Ответы на вопросы по теории тестирования ПО


1. ЧТО ПОДРАЗУМЕВАЕТСЯ ПОД ТЕСТОВОЙ СРЕДОЙ (TEST ENVIRONMENT/TEST BED)?
Среда тестирования – настройка программного и аппаратного обеспечения перед началом выполнения тестовых проверок: настраивается оборудование, программное обеспечение и сеть. Все настраивается в соответствии с требованиями. 
Специалисты по тестированию проверяют новый билд, проводят регрессионные проверки, воспроизводят ошибки. Эта среда проводится во время начала динамического тестирования.  
Правильная настройка тестовой среды гарантирует успешное проведение тестирования ПО. Любые недостатки в этом процессе могут привести к дополнительным затратам и времени клиента. Специалисты, которые принимают участие в настройке тестовой среды: системные администраторы, разработчики, тестировщики. 

2. В ЧЕМ ОТЛИЧИЕ BUILD ОТ RELEASE?
Build (сборка) – версия ПО, которую команда разработки передает команде тестирования. После, эта версия собирается в конечный продукт.
Release – build (сборка), который команда тестирования передает заказчику. Релиз основан на сборках, может иметь несколько сборок. 

3. ОСНОВНЫЕ ФАЗЫ ТЕСТИРОВАНИЯ?
Pre-Alpha – программное обеспечение является прототипом. Завершен пользовательский интерфейс, но не все функции завершены. На данном этапе ПО не публикуется. 
Alpha – является ранней версией программного продукта. Цель – вовлечь клиент в процесс разработки. Альфа-тест должен иметь хороший, определенный план тестирования с тестовыми примерами. Это дает лучшее представление о надежности ПО на ранних стадиях. 
Beta – программное обеспечение стабильно и выпускается для ограниченной пользовательской базы. Цель – получить отзывы от пользователей о продукте и затем внести соответствующие изменения в продукт. 
Release Candidate – вносятся изменения в продукт, основываясь на отзывах бета тестирования и проверяется исправление ошибок. На этом этапе не вносятся радикальные изменения в функциональность, а просто проверяется наличие ошибок. Release Candidate выпущен для общественности. Release Candidate выпускается для конечного пользователя.
Release – всё работает, ПО выпускается для конечного пользователя. 

4. ЧТО ТАКОЕ ИМПАКТ АНАЛИЗ?
Импакт анализ (анализ влияния, Impact Analysis) – это исследование, которое позволяет указать затронутые (поврежденные) места (affected areas) в проекте при разработке новой или изменения старой функциональности, а также помогает определить насколько значительно они были затронуты (повреждены). 
Затронутые области требуют большего внимания при проведении регрессионного тестирования. 
Импакт анализ может быть полезен в следующих случаях:
- есть изменения в требованиях,
- нужно внести изменения в продукт,
- ожидается внедрение нового модули или функциональности в существующий продукт,
- каждый раз, когда есть изменения в существующих модулях или функциональностях продукта. 
В настоящее время продукты становятся всё более большими и комплексными, а компоненты всё чаще зависят друг от друга. Изменение строчки кода в таком проекте может "сломать" абсолютно всё.
Информация о взаимосвязи и взаимном влиянии изменений могут помочь QA: 
- сфокусироваться на тестировании функциональности, где изменения были представлены,
- принять во внимание части проекта, которые были затронуты изменениями и, возможно, пострадали,
- не тратить время на тестирование тех частей проекта, которые не были затронуты изменениями.

5. КРИТЕРИИ ВЫБОРА ТЕСТОВ?
Требования к идеальному критерию тестирования:
- критерий должен быть достаточным – показывать, когда некоторое конечное количество тестов достаточно для тестирования донной программы;
- критерий должен быть полным – в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку;
- критерий должен быть надежным – любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы;
- критерий должен быть легко проверяемым, например, вычисляемым на тестах.
Для нетривиальных классов программ в общем случае не существует полного и надежного критерия, который зависит от программ или спецификаций. Поэтому, существует общий критерий через реальные частные классы критериев:
- структурные критерии используют информацию о структуре программы (критерии так называемого "белого ящика");
- функциональные критерии формулируются в описании требований к программному продукту (критерии так называемого "черного ящика");
- критерии стохастического тестирования формулируются в терминах проверки наличия заданных свойств у тестируемого приложения, средствами проверки некоторой статистической гипотезы;
- мутационные критерии ориентированы на проверку свойств программного изделия на основе подхода Монте-Карло.
Структурные критерии используют модель программы в виде "белого ящика", что предполагает знание исходного текста программы или спецификации программы. Структурная информация понятна и доступна разработчикам подсистем и модулей приложения, поэтому данный класс критериев часто используется на этапах модульного и интеграционного тестирования.
Функциональный критерий – важнейший критерий тестирования. Он обеспечивает, прежде всего, контроль степени выполнения требований заказчика в программном продукте. Поскольку требования формулируются к продукту в целом, они отражают взаимодействие тестируемого приложения с окружением. При функциональном тестировании преимущественно используется модель "черного ящика". Проблема функционального тестирования – это, прежде всего, трудоемкость. Дело в том, что документы, фиксирующие требования к программному продукту, как правило, достаточно объемны, тем не менее, соответствующая проверка должна быть всеобъемлющей.
Стохастическое тестирование применяется при тестировании сложных программных комплексов (основано на генерации тестовых наборов, а именно множества X, случайным образом). 
Мутационный критерий подразумевает, что профессиональные программисты пишут сразу почти правильные программы, отличающиеся от правильных мелкими ошибками или описками. Предлагается подход, позволяющий на основе мелких ошибок оценить общее число ошибок, оставшихся в программе. Подход базируется на следующих понятиях: Мутации – мелкие ошибки в программе. Мутанты – программы, отличающиеся друг от друга мутациями. Метод мутационного тестирования – в разрабатываемую программу вносят мутации, т.е. искусственно создают программы-мутанты. Затем программа и ее мутанты тестируются на одном и том же наборе тестов. Если на наборе подтверждается правильность программы и, кроме того, выявляются все внесенные в программы-мутанты ошибки, то набор тестов соответствует мутационному критерию, а тестируемая программа объявляется правильной. Если некоторые мутанты не выявили всех мутаций, то надо расширять набор тестов и продолжать тестирование.

6. ПРИНЦИПЫ ТЕСТИРОВАНИЯ?
- Тестирование показывает наличие дефектов.
Тестирование может показать наличие дефектов, но не может доказать, что дефектов нет. Сколько бы успешных тестов не было проведено, нельзя утверждать, что нет таких тестов, которые не нашли бы ошибку. Но если обнаружился хотя бы один дефект, уже можно утверждать, что в данном ПО присутствуют дефекты.
- Исчерпывающее тестирование невозможно.
Все протестировать в продукте невозможно. Вместо попыток «протестировать все» нужен какой-то подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта. При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками – одна из наиболее важных активностей в любом проекте.
- Ранее тестирование.
Тестирование должно начинаться как можно раньше в процессе разработки. Этот принцип связан с понятием «цена дефекта» (cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего. Еще одно важное преимущество раннего тестирования – экономия времени. Тестирование может начинаться по мере того, как готовятся требования и спецификации, тестировщики могут приступать к написанию тест-кейсов. И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.
- Скопление дефектов.
В небольшом количество модулей скрыто большое количество дефектов, обнаруженных на этапе предрелизного тестирования, или же демонстрируют наибольшее количество отказов на этапе эксплуатации. Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это может происходить потому, что определенная область кода особенно сложна и запутана, или потому, что внесение изменений производит «эффект домино». Это знание часто используется для оценки рисков при планировании тестов – тестировщики фокусируются на известных «проблемных зонах». Также полезно проводить анализ первопричин (root cause analysis), чтобы предотвратить повторное появление дефектов, обнаружить причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.
- Парадокс пестицида.
Если повторять те же тесты снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Повторное применение тех же тестов и тех же методик приводит к тому, что в продукте остаются именно те дефекты, против которых эти тесты и эти методики неэффективны. Чтобы преодолеть «парадокс пестицидов», необходимо регулярно пересматривать существующие тест-кейсы и создавать новые, разнообразные тесты, которые будут выполняться на различных частях системы.
- Тестирование зависит от контекста.
Выбор методологии, техники или типа тестирования будет зависеть от природы самой программы. Тестирование выполняется по-разному, в зависимости от контекста. Например, тестирование систем, критических с точки зрения безопасности, проводится иначе, чем тестирование сайта интернет-магазина.
- Заблуждение об отсутствии ошибок.
Тот факт, что тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу. Нахождение и исправление дефектов будут не важны, если система окажется неудобной в использовании, и не будет удовлетворять ожиданиям и потребностям пользователя.

7. ЧТО ТАКОЕ НЕЗАВИСИМОЕ ТЕСТИРОВАНИЕ? 

8. ЧТО ТАКОЕ ТЕСТИРОВАНИЕ СО СДВИГОМ ВЛЕВО? 
Тестирование со сдвигом влево – это подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла.  
Ключевые преимущества:
- Сокращение затрат. 
- Более высокое качество.
- Повышение эффективности. 
- Конкурентные преимущества.

9. ПОЧЕМУ ТЕСТИРОВАНИЕ ДЕЛИТСЯ НА ОТДЕЛЬНЫЕ ЭТАПЫ? 
Тестирование делится на отдельные этапы, потому что: 
- Каждый этап испытаний имеет свое назначение; 
- Проще управлять поэтапно;
- Есть возможность запустить разные тесты в разных средах; 
- Производительность и качество тестирования улучшаются с помощью поэтапного тестирования.

10. КАКИЕ ЕСТЬ ЭТАПЫ ТЕСТИРОВАНИЯ?
